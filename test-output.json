{"numFailedTestSuites":7,"numFailedTests":31,"numPassedTestSuites":0,"numPassedTests":21,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":7,"numTotalTests":52,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1746796098717,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["analyze step"],"duration":26,"failureDetails":[],"failureMessages":[],"fullName":"analyze step should perform analysis with default options","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should perform analysis with default options"},{"ancestorTitles":["analyze step"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"analyze step should respect focus parameter","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should respect focus parameter"},{"ancestorTitles":["analyze step"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"analyze step should include recommendations when includeRecommendations is true","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should include recommendations when includeRecommendations is true"},{"ancestorTitles":["analyze step"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"analyze step should respect depth parameter","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should respect depth parameter"},{"ancestorTitles":["analyze step"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"analyze step should include analysis in results when includeInResults is true","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should include analysis in results when includeInResults is true"},{"ancestorTitles":["analyze step"],"duration":96,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected substring: \u001b[32m\"Analysis failed\"\u001b[39m\nReceived message:   \u001b[31m\"Failed to generate analysis: Cannot destructure property 'text' of '(intermediate value)' as it is undefined.\"\u001b[39m\n\n    \u001b[0m \u001b[90m 456 |\u001b[39m         logger\u001b[33m.\u001b[39merror(\u001b[32m`Error generating analysis with LLM: ${errorMessage}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 457 |\u001b[39m         \n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 458 |\u001b[39m         \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mLLMError\u001b[39m({\n     \u001b[90m     |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 459 |\u001b[39m           message\u001b[33m:\u001b[39m \u001b[32m`Failed to generate analysis: ${errorMessage}`\u001b[39m\u001b[33m,\u001b[39m\n     \u001b[90m 460 |\u001b[39m           step\u001b[33m:\u001b[39m \u001b[32m'Analyze'\u001b[39m\u001b[33m,\u001b[39m\n     \u001b[90m 461 |\u001b[39m           details\u001b[33m:\u001b[39m { error\u001b[33m,\u001b[39m focus }\u001b[33m,\u001b[39m\u001b[0m\n\n      \u001b[2mat maxRetries (\u001b[22msrc/steps/analyze.ts\u001b[2m:458:15)\u001b[22m\n      \u001b[2mat executeWithRetry (\u001b[22msrc/utils/retry.ts\u001b[2m:102:14)\u001b[22m\n      \u001b[2mat executeAnalyzeStep (\u001b[22msrc/steps/analyze.ts\u001b[2m:196:28)\u001b[22m\n      \u001b[2mat executeFunc (\u001b[22msrc/utils/steps.ts\u001b[2m:66:26)\u001b[22m\n      \u001b[2mat executeWithRetry (\u001b[22msrc/utils/retry.ts\u001b[2m:102:14)\u001b[22m\n      \u001b[2mat executeStep (\u001b[22mtests/test-utils.ts\u001b[2m:158:10)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22mtests/steps/analyze.test.ts\u001b[2m:258:5)\u001b[22m","pass":false},"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected substring: \u001b[32m\"Analysis failed\"\u001b[39m\nReceived message:   \u001b[31m\"Failed to generate analysis: Cannot destructure property 'text' of '(intermediate value)' as it is undefined.\"\u001b[39m\n\n    \u001b[0m \u001b[90m 456 |\u001b[39m         logger\u001b[33m.\u001b[39merror(\u001b[32m`Error generating analysis with LLM: ${errorMessage}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 457 |\u001b[39m         \n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 458 |\u001b[39m         \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mLLMError\u001b[39m({\n     \u001b[90m     |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 459 |\u001b[39m           message\u001b[33m:\u001b[39m \u001b[32m`Failed to generate analysis: ${errorMessage}`\u001b[39m\u001b[33m,\u001b[39m\n     \u001b[90m 460 |\u001b[39m           step\u001b[33m:\u001b[39m \u001b[32m'Analyze'\u001b[39m\u001b[33m,\u001b[39m\n     \u001b[90m 461 |\u001b[39m           details\u001b[33m:\u001b[39m { error\u001b[33m,\u001b[39m focus }\u001b[33m,\u001b[39m\u001b[0m\n\n      \u001b[2mat maxRetries (\u001b[22msrc/steps/analyze.ts\u001b[2m:458:15)\u001b[22m\n      \u001b[2mat executeWithRetry (\u001b[22msrc/utils/retry.ts\u001b[2m:102:14)\u001b[22m\n      \u001b[2mat executeAnalyzeStep (\u001b[22msrc/steps/analyze.ts\u001b[2m:196:28)\u001b[22m\n      \u001b[2mat executeFunc (\u001b[22msrc/utils/steps.ts\u001b[2m:66:26)\u001b[22m\n      \u001b[2mat executeWithRetry (\u001b[22msrc/utils/retry.ts\u001b[2m:102:14)\u001b[22m\n      \u001b[2mat executeStep (\u001b[22mtests/test-utils.ts\u001b[2m:158:10)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22mtests/steps/analyze.test.ts\u001b[2m:258:5)\u001b[22m"}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected substring: \u001b[32m\"Analysis failed\"\u001b[39m\nReceived message:   \u001b[31m\"Failed to generate analysis: Cannot destructure property 'text' of '(intermediate value)' as it is undefined.\"\u001b[39m\n\n    \u001b[0m \u001b[90m 456 |\u001b[39m         logger\u001b[33m.\u001b[39merror(\u001b[32m`Error generating analysis with LLM: ${errorMessage}`\u001b[39m)\u001b[33m;\u001b[39m\n     \u001b[90m 457 |\u001b[39m         \n    \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 458 |\u001b[39m         \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mLLMError\u001b[39m({\n     \u001b[90m     |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n     \u001b[90m 459 |\u001b[39m           message\u001b[33m:\u001b[39m \u001b[32m`Failed to generate analysis: ${errorMessage}`\u001b[39m\u001b[33m,\u001b[39m\n     \u001b[90m 460 |\u001b[39m           step\u001b[33m:\u001b[39m \u001b[32m'Analyze'\u001b[39m\u001b[33m,\u001b[39m\n     \u001b[90m 461 |\u001b[39m           details\u001b[33m:\u001b[39m { error\u001b[33m,\u001b[39m focus }\u001b[33m,\u001b[39m\u001b[0m\n\n      \u001b[2mat maxRetries (\u001b[22msrc/steps/analyze.ts\u001b[2m:458:15)\u001b[22m\n      \u001b[2mat executeWithRetry (\u001b[22msrc/utils/retry.ts\u001b[2m:102:14)\u001b[22m\n      \u001b[2mat executeAnalyzeStep (\u001b[22msrc/steps/analyze.ts\u001b[2m:196:28)\u001b[22m\n      \u001b[2mat executeFunc (\u001b[22msrc/utils/steps.ts\u001b[2m:66:26)\u001b[22m\n      \u001b[2mat executeWithRetry (\u001b[22msrc/utils/retry.ts\u001b[2m:102:14)\u001b[22m\n      \u001b[2mat executeStep (\u001b[22mtests/test-utils.ts\u001b[2m:158:10)\u001b[22m\n      \u001b[2mat Object.<anonymous> (\u001b[22mtests/steps/analyze.test.ts\u001b[2m:258:5)\u001b[22m\n    at Object.toThrow (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/expect/build/index.js:218:22)\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/analyze.test.ts:258:41)\n    at Promise.then.completed (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"analyze step should handle errors gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle errors gracefully"},{"ancestorTitles":["analyze step"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"analyze step should handle empty content gracefully when allowEmptyContent is true","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty content gracefully when allowEmptyContent is true"},{"ancestorTitles":["analyze step"],"duration":10,"failureDetails":[],"failureMessages":[],"fullName":"analyze step should throw error for empty content when allowEmptyContent is false","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw error for empty content when allowEmptyContent is false"},{"ancestorTitles":["analyze step"],"duration":2,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"prompt\": StringContaining \"This is a custom analysis prompt\"}\u001b[39m\nReceived: \u001b[31m{\"model\": {\"config\": {\"baseURL\": \"http://127.0.0.1:11434/api\", \"fetch\": undefined, \"headers\": [Function getHeaders], \"provider\": \"ollama.chat\"}, \"defaultObjectGenerationMode\": \"json\", \"modelId\": \"phi4-mini\", \"settings\": {}, \"specificationVersion\": \"v1\", \"supportsImageUrls\": false}, \"prompt\": \"\u001b[39m\n\u001b[31mQuery: \\\"test query\\\"·\u001b[39m\n\u001b[31mCONTENT TO ANALYZE:\u001b[39m\n\u001b[31mTest content·\u001b[39m\n\u001b[31mFocus specifically on aspects related to \\\"general\\\" and provide a detailed analysis.\u001b[39m\n\u001b[31mInclude supporting evidence from the provided content.\u001b[39m\n\u001b[31mProvide actionable recommendations based on your analysis.·\u001b[39m\n\u001b[31mFormat your response as valid JSON with the following structure:\u001b[39m\n\u001b[31m{\u001b[39m\n\u001b[31m  \\\"focus\\\": \\\"general\\\",\u001b[39m\n\u001b[31m  \\\"insights\\\": [\\\"insight 1\\\", \\\"insight 2\\\", ...],\u001b[39m\n\u001b[31m  \\\"confidence\\\": 0.85, // a number between 0 and 1 representing your confidence in this analysis\u001b[39m\n\u001b[31m  \\\"supportingEvidence\\\": [\\\"evidence 1\\\", \\\"evidence 2\\\", ...],\u001b[39m\n\u001b[31m  \\\"limitations\\\": [\\\"limitation 1\\\", \\\"limitation 2\\\", ...],\u001b[39m\n\u001b[31m  \\\"recommendations\\\": [\\\"recommendation 1\\\", \\\"recommendation 2\\\", ...]\u001b[39m\n\u001b[31m}·\u001b[39m\n\u001b[31mEnsure the JSON is properly formatted with no trailing commas.\u001b[39m\n\u001b[31m\", \"system\": \"This is a custom analysis prompt\", \"temperature\": 0.3}\u001b[39m\n\nNumber of calls: \u001b[31m1\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"prompt\": StringContaining \"This is a custom analysis prompt\"}\u001b[39m\nReceived: \u001b[31m{\"model\": {\"config\": {\"baseURL\": \"http://127.0.0.1:11434/api\", \"fetch\": undefined, \"headers\": [Function getHeaders], \"provider\": \"ollama.chat\"}, \"defaultObjectGenerationMode\": \"json\", \"modelId\": \"phi4-mini\", \"settings\": {}, \"specificationVersion\": \"v1\", \"supportsImageUrls\": false}, \"prompt\": \"\u001b[39m\n\u001b[31mQuery: \\\"test query\\\"·\u001b[39m\n\u001b[31mCONTENT TO ANALYZE:\u001b[39m\n\u001b[31mTest content·\u001b[39m\n\u001b[31mFocus specifically on aspects related to \\\"general\\\" and provide a detailed analysis.\u001b[39m\n\u001b[31mInclude supporting evidence from the provided content.\u001b[39m\n\u001b[31mProvide actionable recommendations based on your analysis.·\u001b[39m\n\u001b[31mFormat your response as valid JSON with the following structure:\u001b[39m\n\u001b[31m{\u001b[39m\n\u001b[31m  \\\"focus\\\": \\\"general\\\",\u001b[39m\n\u001b[31m  \\\"insights\\\": [\\\"insight 1\\\", \\\"insight 2\\\", ...],\u001b[39m\n\u001b[31m  \\\"confidence\\\": 0.85, // a number between 0 and 1 representing your confidence in this analysis\u001b[39m\n\u001b[31m  \\\"supportingEvidence\\\": [\\\"evidence 1\\\", \\\"evidence 2\\\", ...],\u001b[39m\n\u001b[31m  \\\"limitations\\\": [\\\"limitation 1\\\", \\\"limitation 2\\\", ...],\u001b[39m\n\u001b[31m  \\\"recommendations\\\": [\\\"recommendation 1\\\", \\\"recommendation 2\\\", ...]\u001b[39m\n\u001b[31m}·\u001b[39m\n\u001b[31mEnsure the JSON is properly formatted with no trailing commas.\u001b[39m\n\u001b[31m\", \"system\": \"This is a custom analysis prompt\", \"temperature\": 0.3}\u001b[39m\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/analyze.test.ts:342:26)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"analyze step should use customPrompt when provided","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should use customPrompt when provided"}],"endTime":1746796101719,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1manalyze step › should handle errors gracefully\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected substring: \u001b[32m\"Analysis failed\"\u001b[39m\n    Received message:   \u001b[31m\"Failed to generate analysis: Cannot destructure property 'text' of '(intermediate value)' as it is undefined.\"\u001b[39m\n\n        \u001b[0m \u001b[90m 456 |\u001b[39m         logger\u001b[33m.\u001b[39merror(\u001b[32m`Error generating analysis with LLM: ${errorMessage}`\u001b[39m)\u001b[33m;\u001b[39m\n         \u001b[90m 457 |\u001b[39m         \n        \u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 458 |\u001b[39m         \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mLLMError\u001b[39m({\n         \u001b[90m     |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n         \u001b[90m 459 |\u001b[39m           message\u001b[33m:\u001b[39m \u001b[32m`Failed to generate analysis: ${errorMessage}`\u001b[39m\u001b[33m,\u001b[39m\n         \u001b[90m 460 |\u001b[39m           step\u001b[33m:\u001b[39m \u001b[32m'Analyze'\u001b[39m\u001b[33m,\u001b[39m\n         \u001b[90m 461 |\u001b[39m           details\u001b[33m:\u001b[39m { error\u001b[33m,\u001b[39m focus }\u001b[33m,\u001b[39m\u001b[0m\n\n          \u001b[2mat maxRetries (\u001b[22msrc/steps/analyze.ts\u001b[2m:458:15)\u001b[22m\n          \u001b[2mat executeWithRetry (\u001b[22msrc/utils/retry.ts\u001b[2m:102:14)\u001b[22m\n          \u001b[2mat executeAnalyzeStep (\u001b[22msrc/steps/analyze.ts\u001b[2m:196:28)\u001b[22m\n          \u001b[2mat executeFunc (\u001b[22msrc/utils/steps.ts\u001b[2m:66:26)\u001b[22m\n          \u001b[2mat executeWithRetry (\u001b[22msrc/utils/retry.ts\u001b[2m:102:14)\u001b[22m\n          \u001b[2mat executeStep (\u001b[22mtests/test-utils.ts\u001b[2m:158:10)\u001b[22m\n          \u001b[2mat Object.<anonymous> (\u001b[22mtests/steps/analyze.test.ts\u001b[2m:258:5)\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 256 |\u001b[39m     jest\u001b[33m.\u001b[39mrunAllTimers()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 257 |\u001b[39m     \u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 258 |\u001b[39m     \u001b[36mawait\u001b[39m expect(resultPromise)\u001b[33m.\u001b[39mrejects\u001b[33m.\u001b[39mtoThrow(\u001b[32m'Analysis failed'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                         \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 259 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 260 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 261 |\u001b[39m   it(\u001b[32m'should handle empty content gracefully when allowEmptyContent is true'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toThrow (\u001b[22m\u001b[2mnode_modules/expect/build/index.js\u001b[2m:218:22)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/analyze.test.ts\u001b[39m\u001b[0m\u001b[2m:258:41)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1manalyze step › should use customPrompt when provided\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: \u001b[32mObjectContaining {\"prompt\": StringContaining \"This is a custom analysis prompt\"}\u001b[39m\n    Received: \u001b[31m{\"model\": {\"config\": {\"baseURL\": \"http://127.0.0.1:11434/api\", \"fetch\": undefined, \"headers\": [Function getHeaders], \"provider\": \"ollama.chat\"}, \"defaultObjectGenerationMode\": \"json\", \"modelId\": \"phi4-mini\", \"settings\": {}, \"specificationVersion\": \"v1\", \"supportsImageUrls\": false}, \"prompt\": \"\u001b[39m\n    \u001b[31mQuery: \\\"test query\\\"·\u001b[39m\n    \u001b[31mCONTENT TO ANALYZE:\u001b[39m\n    \u001b[31mTest content·\u001b[39m\n    \u001b[31mFocus specifically on aspects related to \\\"general\\\" and provide a detailed analysis.\u001b[39m\n    \u001b[31mInclude supporting evidence from the provided content.\u001b[39m\n    \u001b[31mProvide actionable recommendations based on your analysis.·\u001b[39m\n    \u001b[31mFormat your response as valid JSON with the following structure:\u001b[39m\n    \u001b[31m{\u001b[39m\n    \u001b[31m  \\\"focus\\\": \\\"general\\\",\u001b[39m\n    \u001b[31m  \\\"insights\\\": [\\\"insight 1\\\", \\\"insight 2\\\", ...],\u001b[39m\n    \u001b[31m  \\\"confidence\\\": 0.85, // a number between 0 and 1 representing your confidence in this analysis\u001b[39m\n    \u001b[31m  \\\"supportingEvidence\\\": [\\\"evidence 1\\\", \\\"evidence 2\\\", ...],\u001b[39m\n    \u001b[31m  \\\"limitations\\\": [\\\"limitation 1\\\", \\\"limitation 2\\\", ...],\u001b[39m\n    \u001b[31m  \\\"recommendations\\\": [\\\"recommendation 1\\\", \\\"recommendation 2\\\", ...]\u001b[39m\n    \u001b[31m}·\u001b[39m\n    \u001b[31mEnsure the JSON is properly formatted with no trailing commas.\u001b[39m\n    \u001b[31m\", \"system\": \"This is a custom analysis prompt\", \"temperature\": 0.3}\u001b[39m\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 340 |\u001b[39m     \u001b[36mawait\u001b[39m resultPromise\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 341 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 342 |\u001b[39m     expect(generateText)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 343 |\u001b[39m       expect\u001b[33m.\u001b[39mobjectContaining({\u001b[22m\n\u001b[2m     \u001b[90m 344 |\u001b[39m         prompt\u001b[33m:\u001b[39m expect\u001b[33m.\u001b[39mstringContaining(customPrompt)\u001b[22m\n\u001b[2m     \u001b[90m 345 |\u001b[39m       })\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/analyze.test.ts\u001b[39m\u001b[0m\u001b[2m:342:26)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/analyze.test.ts","startTime":1746796099036,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Pipeline Execution"],"duration":36,"failureDetails":[],"failureMessages":[],"fullName":"Pipeline Execution should execute a pipeline with a single step successfully","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should execute a pipeline with a single step successfully"},{"ancestorTitles":["Pipeline Execution"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"Pipeline Execution should execute multiple steps in sequence","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should execute multiple steps in sequence"},{"ancestorTitles":["Pipeline Execution"],"duration":34,"failureDetails":[],"failureMessages":[],"fullName":"Pipeline Execution should handle errors in steps when errorHandling is set to \"continue\"","invocations":1,"location":null,"numPassingAsserts":5,"retryReasons":[],"status":"passed","title":"should handle errors in steps when errorHandling is set to \"continue\""},{"ancestorTitles":["Pipeline Execution"],"duration":9,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected substring: \u001b[32m\"Test error in step\"\u001b[39m\nReceived string:    \u001b[31m\"fail is not defined\"\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected substring: \u001b[32m\"Test error in step\"\u001b[39m\nReceived string:    \u001b[31m\"fail is not defined\"\u001b[39m\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/core/pipeline.test.ts:116:31)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Pipeline Execution should stop execution when a step fails and errorHandling is set to \"fail\"","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"failed","title":"should stop execution when a step fails and errorHandling is set to \"fail\""},{"ancestorTitles":["Pipeline Execution"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"Pipeline Execution should pass the correct state between steps","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should pass the correct state between steps"},{"ancestorTitles":["Pipeline Execution"],"duration":2,"failureDetails":[{"matcherResult":{"actual":2,"expected":1,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m1\u001b[39m\nReceived: \u001b[31m2\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m1\u001b[39m\nReceived: \u001b[31m2\u001b[39m\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/core/pipeline.test.ts:168:48)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"Pipeline Execution should track execution time and step metadata","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should track execution time and step metadata"}],"endTime":1746796101944,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPipeline Execution › should stop execution when a step fails and errorHandling is set to \"fail\"\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\n    Expected substring: \u001b[32m\"Test error in step\"\u001b[39m\n    Received string:    \u001b[31m\"fail is not defined\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 114 |\u001b[39m       expect(metadataStep\u001b[33m.\u001b[39mexecute)\u001b[33m.\u001b[39mnot\u001b[33m.\u001b[39mtoHaveBeenCalled()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 115 |\u001b[39m       \u001b[36mif\u001b[39m (error \u001b[36minstanceof\u001b[39m \u001b[33mError\u001b[39m) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 116 |\u001b[39m         expect(error\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoContain(\u001b[32m'Test error in step'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 117 |\u001b[39m       } \u001b[36melse\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 118 |\u001b[39m         fail(\u001b[32m'Expected error to be an instance of Error'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 119 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/core/pipeline.test.ts\u001b[39m\u001b[0m\u001b[2m:116:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mPipeline Execution › should track execution time and step metadata\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m1\u001b[39m\n    Received: \u001b[31m2\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 166 |\u001b[39m     \u001b[22m\n\u001b[2m     \u001b[90m 167 |\u001b[39m     expect(metadataStep\u001b[33m.\u001b[39mexecute)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 168 |\u001b[39m     expect(result\u001b[33m.\u001b[39mmetadata\u001b[33m.\u001b[39mstepHistory\u001b[33m.\u001b[39mlength)\u001b[33m.\u001b[39mtoBe(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                                \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 169 |\u001b[39m     expect(result\u001b[33m.\u001b[39mmetadata\u001b[33m.\u001b[39mstepHistory[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39mstepName)\u001b[33m.\u001b[39mtoBe(\u001b[32m'MetadataStep'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 170 |\u001b[39m     expect(result\u001b[33m.\u001b[39mmetadata\u001b[33m.\u001b[39mstepHistory[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39msuccess)\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 171 |\u001b[39m     expect(result\u001b[33m.\u001b[39mmetadata\u001b[33m.\u001b[39mstepHistory[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39mstartTime)\u001b[33m.\u001b[39mtoBeDefined()\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/core/pipeline.test.ts\u001b[39m\u001b[0m\u001b[2m:168:48)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/core/pipeline.test.ts","startTime":1746796099056,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["factCheck step"],"duration":56,"failureDetails":[],"failureMessages":[],"fullName":"factCheck step should check facts with default options","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should check facts with default options"},{"ancestorTitles":["factCheck step"],"duration":29,"failureDetails":[],"failureMessages":[],"fullName":"factCheck step should respect threshold setting","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should respect threshold setting"},{"ancestorTitles":["factCheck step"],"duration":6,"failureDetails":[],"failureMessages":[],"fullName":"factCheck step should include fact checks in results when includeInResults is true","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"should include fact checks in results when includeInResults is true"},{"ancestorTitles":["factCheck step"],"duration":19,"failureDetails":[],"failureMessages":[],"fullName":"factCheck step should throw an error when no extracted content is available","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw an error when no extracted content is available"},{"ancestorTitles":["factCheck step"],"duration":37,"failureDetails":[{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m()\u001b[22m\n\nReceived promise resolved instead of rejected\nResolved to value: \u001b[31m{\"data\": {\"extractedContent\": [{\"content\": \"Test content for fact checking.\", \"extractionDate\": \"2025-05-09T13:08:21.896Z\", \"title\": \"Example Page 1\", \"url\": \"https://example.com/1\"}], \"factCheckMetadata\": {\"averageConfidence\": 0.5, \"executionTimeMs\": 1, \"invalid\": 2, \"timestamp\": \"2025-05-09T13:08:21.930Z\", \"totalChecked\": 2, \"valid\": 0}, \"factChecks\": [{\"confidence\": 0.5, \"corrections\": \"Unable to verify this statement due to an error\", \"evidence\": [\"Error: Failed to parse LLM response as valid JSON\"], \"isValid\": false, \"statement\": \"Test statement 1\"}, {\"confidence\": 0.5, \"corrections\": \"Unable to verify this statement due to an error\", \"evidence\": [\"Error: Failed to parse LLM response as valid JSON\"], \"isValid\": false, \"statement\": \"Test statement 2\"}], \"factualAccuracyScore\": 0}, \"errors\": [], \"metadata\": {\"confidenceScore\": 0, \"currentStep\": \"FactCheck\", \"errors\": [], \"startTime\": 2025-05-09T13:08:21.896Z, \"stepHistory\": []}, \"outputSchema\": {\"_cached\": null, \"_def\": {\"catchall\": {\"_def\": {\"typeName\": \"ZodNever\"}, \"and\": [Function bound and], \"array\": [Function bound array], \"brand\": [Function bound brand], \"catch\": [Function bound catch], \"default\": [Function bound default], \"describe\": [Function bound describe], \"isNullable\": [Function bound isNullable], \"isOptional\": [Function bound isOptional], \"nullable\": [Function bound nullable], \"nullish\": [Function bound nullish], \"optional\": [Function bound optional], \"or\": [Function bound or], \"parse\": [Function bound parse], \"parseAsync\": [Function bound parseAsync], \"pipe\": [Function bound pipe], \"promise\": [Function bound promise], \"readonly\": [Function bound readonly], \"refine\": [Function bound refine], \"refinement\": [Function bound refinement], \"safeParse\": [Function bound safeParse], \"safeParseAsync\": [Function bound safeParseAsync], \"spa\": [Function bound safeParseAsync], \"superRefine\": [Function bound superRefine], \"transform\": [Function bound transform], \"~standard\": {\"validate\": [Function validate], \"vendor\": \"zod\", \"version\": 1}}, \"shape\": [Function shape], \"typeName\": \"ZodObject\", \"unknownKeys\": \"strip\"}, \"and\": [Function bound and], \"array\": [Function bound array], \"augment\": [Function extend], \"brand\": [Function bound brand], \"catch\": [Function bound catch], \"default\": [Function bound default], \"describe\": [Function bound describe], \"isNullable\": [Function bound isNullable], \"isOptional\": [Function bound isOptional], \"nonstrict\": [Function passthrough], \"nullable\": [Function bound nullable], \"nullish\": [Function bound nullish], \"optional\": [Function bound optional], \"or\": [Function bound or], \"parse\": [Function bound parse], \"parseAsync\": [Function bound parseAsync], \"pipe\": [Function bound pipe], \"promise\": [Function bound promise], \"readonly\": [Function bound readonly], \"refine\": [Function bound refine], \"refinement\": [Function bound refinement], \"safeParse\": [Function bound safeParse], \"safeParseAsync\": [Function bound safeParseAsync], \"spa\": [Function bound safeParseAsync], \"superRefine\": [Function bound superRefine], \"transform\": [Function bound transform], \"~standard\": {\"validate\": [Function validate], \"vendor\": \"zod\", \"version\": 1}}, \"query\": \"test query\", \"results\": [{\"factCheckStats\": {\"averageConfidence\": 0.5, \"invalid\": 2, \"total\": 2, \"valid\": 0}, \"factChecks\": [{\"confidence\": 0.5, \"corrections\": \"Unable to verify this statement due to an error\", \"evidence\": [\"Error: Failed to parse LLM response as valid JSON\"], \"isValid\": false, \"statement\": \"Test statement 1\"}, {\"confidence\": 0.5, \"corrections\": \"Unable to verify this statement due to an error\", \"evidence\": [\"Error: Failed to parse LLM response as valid JSON\"], \"isValid\": false, \"statement\": \"Test statement 2\"}], \"factualAccuracyScore\": 0}]}\u001b[39m"}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m()\u001b[22m\n\nReceived promise resolved instead of rejected\nResolved to value: \u001b[31m{\"data\": {\"extractedContent\": [{\"content\": \"Test content for fact checking.\", \"extractionDate\": \"2025-05-09T13:08:21.896Z\", \"title\": \"Example Page 1\", \"url\": \"https://example.com/1\"}], \"factCheckMetadata\": {\"averageConfidence\": 0.5, \"executionTimeMs\": 1, \"invalid\": 2, \"timestamp\": \"2025-05-09T13:08:21.930Z\", \"totalChecked\": 2, \"valid\": 0}, \"factChecks\": [{\"confidence\": 0.5, \"corrections\": \"Unable to verify this statement due to an error\", \"evidence\": [\"Error: Failed to parse LLM response as valid JSON\"], \"isValid\": false, \"statement\": \"Test statement 1\"}, {\"confidence\": 0.5, \"corrections\": \"Unable to verify this statement due to an error\", \"evidence\": [\"Error: Failed to parse LLM response as valid JSON\"], \"isValid\": false, \"statement\": \"Test statement 2\"}], \"factualAccuracyScore\": 0}, \"errors\": [], \"metadata\": {\"confidenceScore\": 0, \"currentStep\": \"FactCheck\", \"errors\": [], \"startTime\": 2025-05-09T13:08:21.896Z, \"stepHistory\": []}, \"outputSchema\": {\"_cached\": null, \"_def\": {\"catchall\": {\"_def\": {\"typeName\": \"ZodNever\"}, \"and\": [Function bound and], \"array\": [Function bound array], \"brand\": [Function bound brand], \"catch\": [Function bound catch], \"default\": [Function bound default], \"describe\": [Function bound describe], \"isNullable\": [Function bound isNullable], \"isOptional\": [Function bound isOptional], \"nullable\": [Function bound nullable], \"nullish\": [Function bound nullish], \"optional\": [Function bound optional], \"or\": [Function bound or], \"parse\": [Function bound parse], \"parseAsync\": [Function bound parseAsync], \"pipe\": [Function bound pipe], \"promise\": [Function bound promise], \"readonly\": [Function bound readonly], \"refine\": [Function bound refine], \"refinement\": [Function bound refinement], \"safeParse\": [Function bound safeParse], \"safeParseAsync\": [Function bound safeParseAsync], \"spa\": [Function bound safeParseAsync], \"superRefine\": [Function bound superRefine], \"transform\": [Function bound transform], \"~standard\": {\"validate\": [Function validate], \"vendor\": \"zod\", \"version\": 1}}, \"shape\": [Function shape], \"typeName\": \"ZodObject\", \"unknownKeys\": \"strip\"}, \"and\": [Function bound and], \"array\": [Function bound array], \"augment\": [Function extend], \"brand\": [Function bound brand], \"catch\": [Function bound catch], \"default\": [Function bound default], \"describe\": [Function bound describe], \"isNullable\": [Function bound isNullable], \"isOptional\": [Function bound isOptional], \"nonstrict\": [Function passthrough], \"nullable\": [Function bound nullable], \"nullish\": [Function bound nullish], \"optional\": [Function bound optional], \"or\": [Function bound or], \"parse\": [Function bound parse], \"parseAsync\": [Function bound parseAsync], \"pipe\": [Function bound pipe], \"promise\": [Function bound promise], \"readonly\": [Function bound readonly], \"refine\": [Function bound refine], \"refinement\": [Function bound refinement], \"safeParse\": [Function bound safeParse], \"safeParseAsync\": [Function bound safeParseAsync], \"spa\": [Function bound safeParseAsync], \"superRefine\": [Function bound superRefine], \"transform\": [Function bound transform], \"~standard\": {\"validate\": [Function validate], \"vendor\": \"zod\", \"version\": 1}}, \"query\": \"test query\", \"results\": [{\"factCheckStats\": {\"averageConfidence\": 0.5, \"invalid\": 2, \"total\": 2, \"valid\": 0}, \"factChecks\": [{\"confidence\": 0.5, \"corrections\": \"Unable to verify this statement due to an error\", \"evidence\": [\"Error: Failed to parse LLM response as valid JSON\"], \"isValid\": false, \"statement\": \"Test statement 1\"}, {\"confidence\": 0.5, \"corrections\": \"Unable to verify this statement due to an error\", \"evidence\": [\"Error: Failed to parse LLM response as valid JSON\"], \"isValid\": false, \"statement\": \"Test statement 2\"}], \"factualAccuracyScore\": 0}]}\u001b[39m\n    at expect (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/expect/build/index.js:113:15)\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/factCheck.test.ts:154:11)\n    at Promise.then.completed (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"factCheck step should handle LLM errors gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle LLM errors gracefully"},{"ancestorTitles":["factCheck step"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"factCheck step should continue when allowEmptyContent is true and no content exists","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"should continue when allowEmptyContent is true and no content exists"},{"ancestorTitles":["factCheck step"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"factCheck step should extract statements correctly from content","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should extract statements correctly from content"}],"endTime":1746796101949,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mfactCheck step › should handle LLM errors gracefully\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m()\u001b[22m\n\n    Received promise resolved instead of rejected\n    Resolved to value: \u001b[31m{\"data\": {\"extractedContent\": [{\"content\": \"Test content for fact checking.\", \"extractionDate\": \"2025-05-09T13:08:21.896Z\", \"title\": \"Example Page 1\", \"url\": \"https://example.com/1\"}], \"factCheckMetadata\": {\"averageConfidence\": 0.5, \"executionTimeMs\": 1, \"invalid\": 2, \"timestamp\": \"2025-05-09T13:08:21.930Z\", \"totalChecked\": 2, \"valid\": 0}, \"factChecks\": [{\"confidence\": 0.5, \"corrections\": \"Unable to verify this statement due to an error\", \"evidence\": [\"Error: Failed to parse LLM response as valid JSON\"], \"isValid\": false, \"statement\": \"Test statement 1\"}, {\"confidence\": 0.5, \"corrections\": \"Unable to verify this statement due to an error\", \"evidence\": [\"Error: Failed to parse LLM response as valid JSON\"], \"isValid\": false, \"statement\": \"Test statement 2\"}], \"factualAccuracyScore\": 0}, \"errors\": [], \"metadata\": {\"confidenceScore\": 0, \"currentStep\": \"FactCheck\", \"errors\": [], \"startTime\": 2025-05-09T13:08:21.896Z, \"stepHistory\": []}, \"outputSchema\": {\"_cached\": null, \"_def\": {\"catchall\": {\"_def\": {\"typeName\": \"ZodNever\"}, \"and\": [Function bound and], \"array\": [Function bound array], \"brand\": [Function bound brand], \"catch\": [Function bound catch], \"default\": [Function bound default], \"describe\": [Function bound describe], \"isNullable\": [Function bound isNullable], \"isOptional\": [Function bound isOptional], \"nullable\": [Function bound nullable], \"nullish\": [Function bound nullish], \"optional\": [Function bound optional], \"or\": [Function bound or], \"parse\": [Function bound parse], \"parseAsync\": [Function bound parseAsync], \"pipe\": [Function bound pipe], \"promise\": [Function bound promise], \"readonly\": [Function bound readonly], \"refine\": [Function bound refine], \"refinement\": [Function bound refinement], \"safeParse\": [Function bound safeParse], \"safeParseAsync\": [Function bound safeParseAsync], \"spa\": [Function bound safeParseAsync], \"superRefine\": [Function bound superRefine], \"transform\": [Function bound transform], \"~standard\": {\"validate\": [Function validate], \"vendor\": \"zod\", \"version\": 1}}, \"shape\": [Function shape], \"typeName\": \"ZodObject\", \"unknownKeys\": \"strip\"}, \"and\": [Function bound and], \"array\": [Function bound array], \"augment\": [Function extend], \"brand\": [Function bound brand], \"catch\": [Function bound catch], \"default\": [Function bound default], \"describe\": [Function bound describe], \"isNullable\": [Function bound isNullable], \"isOptional\": [Function bound isOptional], \"nonstrict\": [Function passthrough], \"nullable\": [Function bound nullable], \"nullish\": [Function bound nullish], \"optional\": [Function bound optional], \"or\": [Function bound or], \"parse\": [Function bound parse], \"parseAsync\": [Function bound parseAsync], \"pipe\": [Function bound pipe], \"promise\": [Function bound promise], \"readonly\": [Function bound readonly], \"refine\": [Function bound refine], \"refinement\": [Function bound refinement], \"safeParse\": [Function bound safeParse], \"safeParseAsync\": [Function bound safeParseAsync], \"spa\": [Function bound safeParseAsync], \"superRefine\": [Function bound superRefine], \"transform\": [Function bound transform], \"~standard\": {\"validate\": [Function validate], \"vendor\": \"zod\", \"version\": 1}}, \"query\": \"test query\", \"results\": [{\"factCheckStats\": {\"averageConfidence\": 0.5, \"invalid\": 2, \"total\": 2, \"valid\": 0}, \"factChecks\": [{\"confidence\": 0.5, \"corrections\": \"Unable to verify this statement due to an error\", \"evidence\": [\"Error: Failed to parse LLM response as valid JSON\"], \"isValid\": false, \"statement\": \"Test statement 1\"}, {\"confidence\": 0.5, \"corrections\": \"Unable to verify this statement due to an error\", \"evidence\": [\"Error: Failed to parse LLM response as valid JSON\"], \"isValid\": false, \"statement\": \"Test statement 2\"}], \"factualAccuracyScore\": 0}]}\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 152 |\u001b[39m     \u001b[36mconst\u001b[39m factCheckStep \u001b[33m=\u001b[39m factCheck({ llm\u001b[33m:\u001b[39m mockLLM })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 153 |\u001b[39m     \u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 154 |\u001b[39m     \u001b[36mawait\u001b[39m expect(executeStep(factCheckStep\u001b[33m,\u001b[39m initialState))\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 155 |\u001b[39m       \u001b[33m.\u001b[39mrejects\u001b[22m\n\u001b[2m     \u001b[90m 156 |\u001b[39m       \u001b[33m.\u001b[39mtoThrow(\u001b[32m'LLM failure'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 157 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat expect (\u001b[22m\u001b[2mnode_modules/expect/build/index.js\u001b[2m:113:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/factCheck.test.ts\u001b[39m\u001b[0m\u001b[2m:154:11)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/factCheck.test.ts","startTime":1746796099070,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["searchWeb step"],"duration":47,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalled\u001b[2m()\u001b[22m\n\nExpected number of calls: >= \u001b[32m1\u001b[39m\nReceived number of calls:    \u001b[31m0\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalled\u001b[2m()\u001b[22m\n\nExpected number of calls: >= \u001b[32m1\u001b[39m\nReceived number of calls:    \u001b[31m0\u001b[39m\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/searchWeb.test.ts:19:39)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"searchWeb step should search the web with default options","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should search the web with default options"},{"ancestorTitles":["searchWeb step"],"duration":2,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"maxResults\": 1}\u001b[39m\n\nNumber of calls: \u001b[31m0\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"maxResults\": 1}\u001b[39m\n\nNumber of calls: \u001b[31m0\u001b[39m\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/searchWeb.test.ts:35:39)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"searchWeb step should respect maxResults option","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should respect maxResults option"},{"ancestorTitles":["searchWeb step"],"duration":1,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"query\": \"test research query\"}\u001b[39m\n\nNumber of calls: \u001b[31m0\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"query\": \"test research query\"}\u001b[39m\n\nNumber of calls: \u001b[31m0\u001b[39m\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/searchWeb.test.ts:50:39)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"searchWeb step should use research query if no specific query is provided","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should use research query if no specific query is provided"},{"ancestorTitles":["searchWeb step"],"duration":1,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"query\": \"specific search query\"}\u001b[39m\n\nNumber of calls: \u001b[31m0\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"query\": \"specific search query\"}\u001b[39m\n\nNumber of calls: \u001b[31m0\u001b[39m\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/searchWeb.test.ts:68:39)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"searchWeb step should use specific search query when provided","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should use specific search query when provided"},{"ancestorTitles":["searchWeb step"],"duration":5,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected number of calls: \u001b[32m2\u001b[39m\nReceived number of calls: \u001b[31m0\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected number of calls: \u001b[32m2\u001b[39m\nReceived number of calls: \u001b[31m0\u001b[39m\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/searchWeb.test.ts:97:39)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"searchWeb step should use queries from plan when useQueriesFromPlan is true","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should use queries from plan when useQueriesFromPlan is true"},{"ancestorTitles":["searchWeb step"],"duration":7,"failureDetails":[{"matcherResult":{"actual":0,"expected":2,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m0\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m2\u001b[39m\nReceived: \u001b[31m0\u001b[39m\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/searchWeb.test.ts:140:53)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"searchWeb step should merge search results when executing multiple queries","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should merge search results when executing multiple queries"},{"ancestorTitles":["searchWeb step"],"duration":42,"failureDetails":[{}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\n\u001b[1mMatcher error\u001b[22m: \u001b[31mreceived\u001b[39m value must not be null nor undefined\n\nReceived has value: \u001b[31mundefined\u001b[39m\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/searchWeb.test.ts:155:52)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"searchWeb step should include search results in final output when includeInResults is true","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should include search results in final output when includeInResults is true"},{"ancestorTitles":["searchWeb step"],"duration":1,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected substring: \u001b[32m\"Search API failure\"\u001b[39m\nReceived string:    \u001b[31m\"fail is not defined\"\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected substring: \u001b[32m\"Search API failure\"\u001b[39m\nReceived string:    \u001b[31m\"fail is not defined\"\u001b[39m\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/searchWeb.test.ts:174:31)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"searchWeb step should handle errors from search provider","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle errors from search provider"},{"ancestorTitles":["searchWeb step"],"duration":1,"failureDetails":[{"matcherResult":{"actual":0,"expected":1,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m1\u001b[39m\nReceived: \u001b[31m0\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m1\u001b[39m\nReceived: \u001b[31m0\u001b[39m\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/searchWeb.test.ts:199:53)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"searchWeb step should deduplicate search results by URL","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should deduplicate search results by URL"}],"endTime":1746796101937,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1msearchWeb step › should search the web with default options\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalled\u001b[2m()\u001b[22m\n\n    Expected number of calls: >= \u001b[32m1\u001b[39m\n    Received number of calls:    \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 17 |\u001b[39m     \u001b[36mconst\u001b[39m updatedState \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m executeStep(searchStep\u001b[33m,\u001b[39m initialState)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m     \u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 19 |\u001b[39m     expect(mockSearchProvider\u001b[33m.\u001b[39msearch)\u001b[33m.\u001b[39mtoHaveBeenCalled()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                       \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 20 |\u001b[39m     expect(updatedState\u001b[33m.\u001b[39mdata\u001b[33m.\u001b[39msearchResults)\u001b[33m.\u001b[39mtoBeDefined()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m     expect(updatedState\u001b[33m.\u001b[39mdata\u001b[33m.\u001b[39msearchResults\u001b[33m?\u001b[39m\u001b[33m.\u001b[39mlength)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/searchWeb.test.ts\u001b[39m\u001b[0m\u001b[2m:19:39)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1msearchWeb step › should respect maxResults option\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: \u001b[32mObjectContaining {\"maxResults\": 1}\u001b[39m\n\n    Number of calls: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 33 |\u001b[39m     \u001b[22m\n\u001b[2m     \u001b[90m 34 |\u001b[39m     \u001b[90m// Verify search was called with maxResults parameter\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 35 |\u001b[39m     expect(mockSearchProvider\u001b[33m.\u001b[39msearch)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                       \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 36 |\u001b[39m       expect\u001b[33m.\u001b[39mobjectContaining({\u001b[22m\n\u001b[2m     \u001b[90m 37 |\u001b[39m         maxResults\u001b[22m\n\u001b[2m     \u001b[90m 38 |\u001b[39m       })\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/searchWeb.test.ts\u001b[39m\u001b[0m\u001b[2m:35:39)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1msearchWeb step › should use research query if no specific query is provided\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: \u001b[32mObjectContaining {\"query\": \"test research query\"}\u001b[39m\n\n    Number of calls: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 48 |\u001b[39m     \u001b[22m\n\u001b[2m     \u001b[90m 49 |\u001b[39m     \u001b[90m// Verify search was called with the research query\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 50 |\u001b[39m     expect(mockSearchProvider\u001b[33m.\u001b[39msearch)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                       \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 51 |\u001b[39m       expect\u001b[33m.\u001b[39mobjectContaining({\u001b[22m\n\u001b[2m     \u001b[90m 52 |\u001b[39m         query\u001b[22m\n\u001b[2m     \u001b[90m 53 |\u001b[39m       })\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/searchWeb.test.ts\u001b[39m\u001b[0m\u001b[2m:50:39)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1msearchWeb step › should use specific search query when provided\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: \u001b[32mObjectContaining {\"query\": \"specific search query\"}\u001b[39m\n\n    Number of calls: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 66 |\u001b[39m     \u001b[22m\n\u001b[2m     \u001b[90m 67 |\u001b[39m     \u001b[90m// Verify search was called with the specific query, not the research query\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 68 |\u001b[39m     expect(mockSearchProvider\u001b[33m.\u001b[39msearch)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                                       \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 69 |\u001b[39m       expect\u001b[33m.\u001b[39mobjectContaining({\u001b[22m\n\u001b[2m     \u001b[90m 70 |\u001b[39m         query\u001b[33m:\u001b[39m specificQuery\u001b[22m\n\u001b[2m     \u001b[90m 71 |\u001b[39m       })\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/searchWeb.test.ts\u001b[39m\u001b[0m\u001b[2m:68:39)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1msearchWeb step › should use queries from plan when useQueriesFromPlan is true\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected number of calls: \u001b[32m2\u001b[39m\n    Received number of calls: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  95 |\u001b[39m     \u001b[22m\n\u001b[2m     \u001b[90m  96 |\u001b[39m     \u001b[90m// Verify search was called multiple times, once for each query from the plan\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m  97 |\u001b[39m     expect(mockSearchProvider\u001b[33m.\u001b[39msearch)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m2\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                       \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m  98 |\u001b[39m     expect(mockSearchProvider\u001b[33m.\u001b[39msearch)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[22m\n\u001b[2m     \u001b[90m  99 |\u001b[39m       expect\u001b[33m.\u001b[39mobjectContaining({\u001b[22m\n\u001b[2m     \u001b[90m 100 |\u001b[39m         query\u001b[33m:\u001b[39m \u001b[32m'query from plan 1'\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/searchWeb.test.ts\u001b[39m\u001b[0m\u001b[2m:97:39)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1msearchWeb step › should merge search results when executing multiple queries\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m2\u001b[39m\n    Received: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 138 |\u001b[39m     \u001b[22m\n\u001b[2m     \u001b[90m 139 |\u001b[39m     \u001b[90m// Should have merged results from both queries\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 140 |\u001b[39m     expect(updatedState\u001b[33m.\u001b[39mdata\u001b[33m.\u001b[39msearchResults\u001b[33m?\u001b[39m\u001b[33m.\u001b[39mlength)\u001b[33m.\u001b[39mtoBe(\u001b[35m2\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 141 |\u001b[39m     expect(updatedState\u001b[33m.\u001b[39mdata\u001b[33m.\u001b[39msearchResults\u001b[33m?\u001b[39m\u001b[33m.\u001b[39m[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39mtitle)\u001b[33m.\u001b[39mtoBe(\u001b[32m'Result 1'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 142 |\u001b[39m     expect(updatedState\u001b[33m.\u001b[39mdata\u001b[33m.\u001b[39msearchResults\u001b[33m?\u001b[39m\u001b[33m.\u001b[39m[\u001b[35m1\u001b[39m]\u001b[33m.\u001b[39mtitle)\u001b[33m.\u001b[39mtoBe(\u001b[32m'Result 2'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 143 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/searchWeb.test.ts\u001b[39m\u001b[0m\u001b[2m:140:53)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1msearchWeb step › should include search results in final output when includeInResults is true\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\n    \u001b[1mMatcher error\u001b[22m: \u001b[31mreceived\u001b[39m value must not be null nor undefined\n\n    Received has value: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 153 |\u001b[39m     \u001b[22m\n\u001b[2m     \u001b[90m 154 |\u001b[39m     \u001b[90m// When includeInResults is true, searchResults should be included in final results\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 155 |\u001b[39m     expect(updatedState\u001b[33m.\u001b[39mmetadata\u001b[33m.\u001b[39mincludeInResults)\u001b[33m.\u001b[39mtoContain(\u001b[32m'searchResults'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                                    \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 156 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 157 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 158 |\u001b[39m   it(\u001b[32m'should handle errors from search provider'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/searchWeb.test.ts\u001b[39m\u001b[0m\u001b[2m:155:52)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1msearchWeb step › should handle errors from search provider\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\n    Expected substring: \u001b[32m\"Search API failure\"\u001b[39m\n    Received string:    \u001b[31m\"fail is not defined\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 172 |\u001b[39m       \u001b[90m// Properly type the error as unknown and check if it's an Error object\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 173 |\u001b[39m       \u001b[36mif\u001b[39m (error \u001b[36minstanceof\u001b[39m \u001b[33mError\u001b[39m) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 174 |\u001b[39m         expect(error\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoContain(\u001b[32m'Search API failure'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 175 |\u001b[39m       } \u001b[36melse\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 176 |\u001b[39m         fail(\u001b[32m'Error should be an instance of Error'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 177 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/searchWeb.test.ts\u001b[39m\u001b[0m\u001b[2m:174:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1msearchWeb step › should deduplicate search results by URL\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m1\u001b[39m\n    Received: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 197 |\u001b[39m     \u001b[22m\n\u001b[2m     \u001b[90m 198 |\u001b[39m     \u001b[90m// Should have deduplicated the results\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 199 |\u001b[39m     expect(updatedState\u001b[33m.\u001b[39mdata\u001b[33m.\u001b[39msearchResults\u001b[33m?\u001b[39m\u001b[33m.\u001b[39mlength)\u001b[33m.\u001b[39mtoBe(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                                     \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 200 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 201 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/searchWeb.test.ts\u001b[39m\u001b[0m\u001b[2m:199:53)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/searchWeb.test.ts","startTime":1746796099060,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["summarize step"],"duration":39,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalled\u001b[2m()\u001b[22m\n\nExpected number of calls: >= \u001b[32m1\u001b[39m\nReceived number of calls:    \u001b[31m0\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalled\u001b[2m()\u001b[22m\n\nExpected number of calls: >= \u001b[32m1\u001b[39m\nReceived number of calls:    \u001b[31m0\u001b[39m\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/summarize.test.ts:58:26)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"summarize step should generate a summary with default options","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should generate a summary with default options"},{"ancestorTitles":["summarize step"],"duration":8,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"prompt\": StringContaining \"200\"}\u001b[39m\n\nNumber of calls: \u001b[31m0\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"prompt\": StringContaining \"200\"}\u001b[39m\n\nNumber of calls: \u001b[31m0\u001b[39m\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/summarize.test.ts:96:26)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"summarize step should respect maxLength parameter","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should respect maxLength parameter"},{"ancestorTitles":["summarize step"],"duration":11,"failureDetails":[],"failureMessages":[],"fullName":"summarize step should support structured format for summaries","invocations":1,"location":null,"numPassingAsserts":4,"retryReasons":[],"status":"passed","title":"should support structured format for summaries"},{"ancestorTitles":["summarize step"],"duration":2,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"prompt\": StringContaining \"technology\"}\u001b[39m\n\nNumber of calls: \u001b[31m0\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"prompt\": StringContaining \"technology\"}\u001b[39m\n\nNumber of calls: \u001b[31m0\u001b[39m\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/summarize.test.ts:183:28)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"summarize step should include focus areas when specified","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should include focus areas when specified"},{"ancestorTitles":["summarize step"],"duration":3,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"prompt\": StringContaining \"citation\"}\u001b[39m\n\nNumber of calls: \u001b[31m0\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"prompt\": StringContaining \"citation\"}\u001b[39m\n\nNumber of calls: \u001b[31m0\u001b[39m\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/summarize.test.ts:228:26)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"summarize step should include citations when includeCitations is true","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should include citations when includeCitations is true"},{"ancestorTitles":["summarize step"],"duration":5,"failureDetails":[{"matcherResult":{"actual":"This is a generated summary of the research content.","expected":"This is a test summary.","message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"This is a \u001b[7mtest summary\u001b[27m.\"\u001b[39m\nReceived: \u001b[31m\"This is a \u001b[7mgenerated summary of the research content\u001b[27m.\"\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m\"This is a \u001b[7mtest summary\u001b[27m.\"\u001b[39m\nReceived: \u001b[31m\"This is a \u001b[7mgenerated summary of the research content\u001b[27m.\"\u001b[39m\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/summarize.test.ts:266:45)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"summarize step should include summary in results when includeInResults is true","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"failed","title":"should include summary in results when includeInResults is true"},{"ancestorTitles":["summarize step"],"duration":1,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"prompt\": StringContaining \"verified fact\"}\u001b[39m\n\nNumber of calls: \u001b[31m0\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"prompt\": StringContaining \"verified fact\"}\u001b[39m\n\nNumber of calls: \u001b[31m0\u001b[39m\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/summarize.test.ts:312:26)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"summarize step should use fact checks when factsOnly is true","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should use fact checks when factsOnly is true"},{"ancestorTitles":["summarize step"],"duration":5,"failureDetails":[{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m()\u001b[22m\n\nReceived promise resolved instead of rejected\nResolved to value: \u001b[31m{\"data\": {\"extractedContent\": [{\"content\": \"Test content\", \"extractionDate\": \"2025-05-09T13:08:21.919Z\", \"title\": \"Test article\", \"url\": \"https://example.com/1\"}], \"summary\": \"This is a generated summary of the research content.\"}, \"errors\": [], \"metadata\": {\"currentStep\": \"Summarize\", \"errors\": [], \"startTime\": 2025-05-09T13:08:21.919Z, \"stepHistory\": [], \"summaryFormat\": \"paragraph\", \"summaryLength\": 52}, \"outputSchema\": {\"_cached\": null, \"_def\": {\"catchall\": {\"_def\": {\"typeName\": \"ZodNever\"}, \"and\": [Function bound and], \"array\": [Function bound array], \"brand\": [Function bound brand], \"catch\": [Function bound catch], \"default\": [Function bound default], \"describe\": [Function bound describe], \"isNullable\": [Function bound isNullable], \"isOptional\": [Function bound isOptional], \"nullable\": [Function bound nullable], \"nullish\": [Function bound nullish], \"optional\": [Function bound optional], \"or\": [Function bound or], \"parse\": [Function bound parse], \"parseAsync\": [Function bound parseAsync], \"pipe\": [Function bound pipe], \"promise\": [Function bound promise], \"readonly\": [Function bound readonly], \"refine\": [Function bound refine], \"refinement\": [Function bound refinement], \"safeParse\": [Function bound safeParse], \"safeParseAsync\": [Function bound safeParseAsync], \"spa\": [Function bound safeParseAsync], \"superRefine\": [Function bound superRefine], \"transform\": [Function bound transform], \"~standard\": {\"validate\": [Function validate], \"vendor\": \"zod\", \"version\": 1}}, \"shape\": [Function shape], \"typeName\": \"ZodObject\", \"unknownKeys\": \"strip\"}, \"and\": [Function bound and], \"array\": [Function bound array], \"augment\": [Function extend], \"brand\": [Function bound brand], \"catch\": [Function bound catch], \"default\": [Function bound default], \"describe\": [Function bound describe], \"isNullable\": [Function bound isNullable], \"isOptional\": [Function bound isOptional], \"nonstrict\": [Function passthrough], \"nullable\": [Function bound nullable], \"nullish\": [Function bound nullish], \"optional\": [Function bound optional], \"or\": [Function bound or], \"parse\": [Function bound parse], \"parseAsync\": [Function bound parseAsync], \"pipe\": [Function bound pipe], \"promise\": [Function bound promise], \"readonly\": [Function bound readonly], \"refine\": [Function bound refine], \"refinement\": [Function bound refinement], \"safeParse\": [Function bound safeParse], \"safeParseAsync\": [Function bound safeParseAsync], \"spa\": [Function bound safeParseAsync], \"superRefine\": [Function bound superRefine], \"transform\": [Function bound transform], \"~standard\": {\"validate\": [Function validate], \"vendor\": \"zod\", \"version\": 1}}, \"query\": \"test query\", \"results\": [{\"summary\": \"This is a generated summary of the research content.\"}]}\u001b[39m"}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m()\u001b[22m\n\nReceived promise resolved instead of rejected\nResolved to value: \u001b[31m{\"data\": {\"extractedContent\": [{\"content\": \"Test content\", \"extractionDate\": \"2025-05-09T13:08:21.919Z\", \"title\": \"Test article\", \"url\": \"https://example.com/1\"}], \"summary\": \"This is a generated summary of the research content.\"}, \"errors\": [], \"metadata\": {\"currentStep\": \"Summarize\", \"errors\": [], \"startTime\": 2025-05-09T13:08:21.919Z, \"stepHistory\": [], \"summaryFormat\": \"paragraph\", \"summaryLength\": 52}, \"outputSchema\": {\"_cached\": null, \"_def\": {\"catchall\": {\"_def\": {\"typeName\": \"ZodNever\"}, \"and\": [Function bound and], \"array\": [Function bound array], \"brand\": [Function bound brand], \"catch\": [Function bound catch], \"default\": [Function bound default], \"describe\": [Function bound describe], \"isNullable\": [Function bound isNullable], \"isOptional\": [Function bound isOptional], \"nullable\": [Function bound nullable], \"nullish\": [Function bound nullish], \"optional\": [Function bound optional], \"or\": [Function bound or], \"parse\": [Function bound parse], \"parseAsync\": [Function bound parseAsync], \"pipe\": [Function bound pipe], \"promise\": [Function bound promise], \"readonly\": [Function bound readonly], \"refine\": [Function bound refine], \"refinement\": [Function bound refinement], \"safeParse\": [Function bound safeParse], \"safeParseAsync\": [Function bound safeParseAsync], \"spa\": [Function bound safeParseAsync], \"superRefine\": [Function bound superRefine], \"transform\": [Function bound transform], \"~standard\": {\"validate\": [Function validate], \"vendor\": \"zod\", \"version\": 1}}, \"shape\": [Function shape], \"typeName\": \"ZodObject\", \"unknownKeys\": \"strip\"}, \"and\": [Function bound and], \"array\": [Function bound array], \"augment\": [Function extend], \"brand\": [Function bound brand], \"catch\": [Function bound catch], \"default\": [Function bound default], \"describe\": [Function bound describe], \"isNullable\": [Function bound isNullable], \"isOptional\": [Function bound isOptional], \"nonstrict\": [Function passthrough], \"nullable\": [Function bound nullable], \"nullish\": [Function bound nullish], \"optional\": [Function bound optional], \"or\": [Function bound or], \"parse\": [Function bound parse], \"parseAsync\": [Function bound parseAsync], \"pipe\": [Function bound pipe], \"promise\": [Function bound promise], \"readonly\": [Function bound readonly], \"refine\": [Function bound refine], \"refinement\": [Function bound refinement], \"safeParse\": [Function bound safeParse], \"safeParseAsync\": [Function bound safeParseAsync], \"spa\": [Function bound safeParseAsync], \"superRefine\": [Function bound superRefine], \"transform\": [Function bound transform], \"~standard\": {\"validate\": [Function validate], \"vendor\": \"zod\", \"version\": 1}}, \"query\": \"test query\", \"results\": [{\"summary\": \"This is a generated summary of the research content.\"}]}\u001b[39m\n    at expect (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/expect/build/index.js:113:15)\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/summarize.test.ts:345:11)\n    at Promise.then.completed (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"summarize step should handle errors gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle errors gracefully"},{"ancestorTitles":["summarize step"],"duration":3,"failureDetails":[],"failureMessages":[],"fullName":"summarize step should handle empty content gracefully when allowEmptyContent is true","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should handle empty content gracefully when allowEmptyContent is true"},{"ancestorTitles":["summarize step"],"duration":2,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"prompt\": StringContaining \"This is a custom summarization prompt\"}\u001b[39m\n\nNumber of calls: \u001b[31m0\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected: \u001b[32mObjectContaining {\"prompt\": StringContaining \"This is a custom summarization prompt\"}\u001b[39m\n\nNumber of calls: \u001b[31m0\u001b[39m\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/summarize.test.ts:402:26)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"summarize step should use customPrompt when provided","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should use customPrompt when provided"}],"endTime":1746796102009,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1msummarize step › should generate a summary with default options\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalled\u001b[2m()\u001b[22m\n\n    Expected number of calls: >= \u001b[32m1\u001b[39m\n    Received number of calls:    \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 56 |\u001b[39m     \u001b[36mconst\u001b[39m updatedState \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m resultPromise\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 57 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 58 |\u001b[39m     expect(generateText)\u001b[33m.\u001b[39mtoHaveBeenCalled()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 59 |\u001b[39m     expect(updatedState\u001b[33m.\u001b[39mdata\u001b[33m.\u001b[39msummary)\u001b[33m.\u001b[39mtoBeDefined()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 60 |\u001b[39m     expect(\u001b[36mtypeof\u001b[39m updatedState\u001b[33m.\u001b[39mdata\u001b[33m.\u001b[39msummary)\u001b[33m.\u001b[39mtoBe(\u001b[32m'string'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 61 |\u001b[39m     expect(updatedState\u001b[33m.\u001b[39mdata\u001b[33m.\u001b[39msummary)\u001b[33m.\u001b[39mtoBe(\u001b[32m'This is a generated summary of the research content.'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/summarize.test.ts\u001b[39m\u001b[0m\u001b[2m:58:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1msummarize step › should respect maxLength parameter\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: \u001b[32mObjectContaining {\"prompt\": StringContaining \"200\"}\u001b[39m\n\n    Number of calls: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 94 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 95 |\u001b[39m     \u001b[90m// Verify the maxLength was passed to the LLM\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 96 |\u001b[39m     expect(generateText)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 97 |\u001b[39m       expect\u001b[33m.\u001b[39mobjectContaining({\u001b[22m\n\u001b[2m     \u001b[90m 98 |\u001b[39m         prompt\u001b[33m:\u001b[39m expect\u001b[33m.\u001b[39mstringContaining(maxLength\u001b[33m.\u001b[39mtoString())\u001b[22m\n\u001b[2m     \u001b[90m 99 |\u001b[39m       })\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/summarize.test.ts\u001b[39m\u001b[0m\u001b[2m:96:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1msummarize step › should include focus areas when specified\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: \u001b[32mObjectContaining {\"prompt\": StringContaining \"technology\"}\u001b[39m\n\n    Number of calls: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 181 |\u001b[39m     \u001b[90m// Check that focus areas were passed to the LLM\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 182 |\u001b[39m     \u001b[36mfor\u001b[39m (\u001b[36mconst\u001b[39m focusArea \u001b[36mof\u001b[39m focus) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 183 |\u001b[39m       expect(generateText)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                            \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 184 |\u001b[39m         expect\u001b[33m.\u001b[39mobjectContaining({\u001b[22m\n\u001b[2m     \u001b[90m 185 |\u001b[39m           prompt\u001b[33m:\u001b[39m expect\u001b[33m.\u001b[39mstringContaining(focusArea)\u001b[22m\n\u001b[2m     \u001b[90m 186 |\u001b[39m         })\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/summarize.test.ts\u001b[39m\u001b[0m\u001b[2m:183:28)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1msummarize step › should include citations when includeCitations is true\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: \u001b[32mObjectContaining {\"prompt\": StringContaining \"citation\"}\u001b[39m\n\n    Number of calls: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 226 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 227 |\u001b[39m     \u001b[90m// Verify citations instructions were included in the prompt\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 228 |\u001b[39m     expect(generateText)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 229 |\u001b[39m       expect\u001b[33m.\u001b[39mobjectContaining({\u001b[22m\n\u001b[2m     \u001b[90m 230 |\u001b[39m         prompt\u001b[33m:\u001b[39m expect\u001b[33m.\u001b[39mstringContaining(\u001b[32m'citation'\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m 231 |\u001b[39m       })\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/summarize.test.ts\u001b[39m\u001b[0m\u001b[2m:228:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1msummarize step › should include summary in results when includeInResults is true\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32m\"This is a \u001b[7mtest summary\u001b[27m.\"\u001b[39m\n    Received: \u001b[31m\"This is a \u001b[7mgenerated summary of the research content\u001b[27m.\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 264 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 265 |\u001b[39m     expect(updatedState\u001b[33m.\u001b[39mresults\u001b[33m.\u001b[39mlength)\u001b[33m.\u001b[39mtoBeGreaterThan(\u001b[35m0\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 266 |\u001b[39m     expect(updatedState\u001b[33m.\u001b[39mresults[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39msummary)\u001b[33m.\u001b[39mtoBe(\u001b[32m'This is a test summary.'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                                             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 267 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 268 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 269 |\u001b[39m   it(\u001b[32m'should use fact checks when factsOnly is true'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/summarize.test.ts\u001b[39m\u001b[0m\u001b[2m:266:45)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1msummarize step › should use fact checks when factsOnly is true\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: \u001b[32mObjectContaining {\"prompt\": StringContaining \"verified fact\"}\u001b[39m\n\n    Number of calls: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 310 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 311 |\u001b[39m     \u001b[90m// Verify fact-checking instructions were included\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 312 |\u001b[39m     expect(generateText)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 313 |\u001b[39m       expect\u001b[33m.\u001b[39mobjectContaining({\u001b[22m\n\u001b[2m     \u001b[90m 314 |\u001b[39m         prompt\u001b[33m:\u001b[39m expect\u001b[33m.\u001b[39mstringContaining(\u001b[32m'verified fact'\u001b[39m)\u001b[22m\n\u001b[2m     \u001b[90m 315 |\u001b[39m       })\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/summarize.test.ts\u001b[39m\u001b[0m\u001b[2m:312:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1msummarize step › should handle errors gracefully\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mrejects\u001b[2m.\u001b[22mtoThrow\u001b[2m()\u001b[22m\n\n    Received promise resolved instead of rejected\n    Resolved to value: \u001b[31m{\"data\": {\"extractedContent\": [{\"content\": \"Test content\", \"extractionDate\": \"2025-05-09T13:08:21.919Z\", \"title\": \"Test article\", \"url\": \"https://example.com/1\"}], \"summary\": \"This is a generated summary of the research content.\"}, \"errors\": [], \"metadata\": {\"currentStep\": \"Summarize\", \"errors\": [], \"startTime\": 2025-05-09T13:08:21.919Z, \"stepHistory\": [], \"summaryFormat\": \"paragraph\", \"summaryLength\": 52}, \"outputSchema\": {\"_cached\": null, \"_def\": {\"catchall\": {\"_def\": {\"typeName\": \"ZodNever\"}, \"and\": [Function bound and], \"array\": [Function bound array], \"brand\": [Function bound brand], \"catch\": [Function bound catch], \"default\": [Function bound default], \"describe\": [Function bound describe], \"isNullable\": [Function bound isNullable], \"isOptional\": [Function bound isOptional], \"nullable\": [Function bound nullable], \"nullish\": [Function bound nullish], \"optional\": [Function bound optional], \"or\": [Function bound or], \"parse\": [Function bound parse], \"parseAsync\": [Function bound parseAsync], \"pipe\": [Function bound pipe], \"promise\": [Function bound promise], \"readonly\": [Function bound readonly], \"refine\": [Function bound refine], \"refinement\": [Function bound refinement], \"safeParse\": [Function bound safeParse], \"safeParseAsync\": [Function bound safeParseAsync], \"spa\": [Function bound safeParseAsync], \"superRefine\": [Function bound superRefine], \"transform\": [Function bound transform], \"~standard\": {\"validate\": [Function validate], \"vendor\": \"zod\", \"version\": 1}}, \"shape\": [Function shape], \"typeName\": \"ZodObject\", \"unknownKeys\": \"strip\"}, \"and\": [Function bound and], \"array\": [Function bound array], \"augment\": [Function extend], \"brand\": [Function bound brand], \"catch\": [Function bound catch], \"default\": [Function bound default], \"describe\": [Function bound describe], \"isNullable\": [Function bound isNullable], \"isOptional\": [Function bound isOptional], \"nonstrict\": [Function passthrough], \"nullable\": [Function bound nullable], \"nullish\": [Function bound nullish], \"optional\": [Function bound optional], \"or\": [Function bound or], \"parse\": [Function bound parse], \"parseAsync\": [Function bound parseAsync], \"pipe\": [Function bound pipe], \"promise\": [Function bound promise], \"readonly\": [Function bound readonly], \"refine\": [Function bound refine], \"refinement\": [Function bound refinement], \"safeParse\": [Function bound safeParse], \"safeParseAsync\": [Function bound safeParseAsync], \"spa\": [Function bound safeParseAsync], \"superRefine\": [Function bound superRefine], \"transform\": [Function bound transform], \"~standard\": {\"validate\": [Function validate], \"vendor\": \"zod\", \"version\": 1}}, \"query\": \"test query\", \"results\": [{\"summary\": \"This is a generated summary of the research content.\"}]}\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 343 |\u001b[39m     jest\u001b[33m.\u001b[39mrunAllTimers()\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 344 |\u001b[39m     \u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 345 |\u001b[39m     \u001b[36mawait\u001b[39m expect(resultPromise)\u001b[33m.\u001b[39mrejects\u001b[33m.\u001b[39mtoThrow(\u001b[32m'Summarization failed'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m           \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 346 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 347 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 348 |\u001b[39m   it(\u001b[32m'should handle empty content gracefully when allowEmptyContent is true'\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat expect (\u001b[22m\u001b[2mnode_modules/expect/build/index.js\u001b[2m:113:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/summarize.test.ts\u001b[39m\u001b[0m\u001b[2m:345:11)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1msummarize step › should use customPrompt when provided\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected: \u001b[32mObjectContaining {\"prompt\": StringContaining \"This is a custom summarization prompt\"}\u001b[39m\n\n    Number of calls: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 400 |\u001b[39m     \u001b[36mawait\u001b[39m resultPromise\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 401 |\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 402 |\u001b[39m     expect(generateText)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 403 |\u001b[39m       expect\u001b[33m.\u001b[39mobjectContaining({\u001b[22m\n\u001b[2m     \u001b[90m 404 |\u001b[39m         prompt\u001b[33m:\u001b[39m expect\u001b[33m.\u001b[39mstringContaining(customPrompt)\u001b[22m\n\u001b[2m     \u001b[90m 405 |\u001b[39m       })\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/summarize.test.ts\u001b[39m\u001b[0m\u001b[2m:402:26)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/summarize.test.ts","startTime":1746796099061,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["plan step"],"duration":21,"failureDetails":[{"name":"ConfigurationError","code":"configuration_error","step":"ResearchPlanning","details":{"options":{}},"retry":false,"suggestions":["Provide an LLM in the step options using the 'llm' parameter","Set a defaultLLM when initializing the research function","Example: research({ defaultLLM: openai('gpt-4'), ... })"]}],"failureMessages":["ConfigurationError: No language model provided for planning step\n    at executePlanStep (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/steps/plan.ts:92:13)\n    at retryable (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/steps/plan.ts:340:14)\n    at executeFunc (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/utils/steps.ts:66:32)\n    at executeWithRetry (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/utils/retry.ts:71:18)\n    at Object.execute (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/utils/steps.ts:105:32)\n    at executeStep (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/test-utils.ts:158:21)\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/plan.test.ts:19:43)\n    at Promise.then.completed (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"plan step should create a research plan with default options","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should create a research plan with default options"},{"ancestorTitles":["plan step"],"duration":3,"failureDetails":[{"name":"LLMError","code":"llm_error","step":"ResearchPlanning","details":{"error":{},"query":"test query"},"retry":true,"suggestions":["Check your LLM configuration","Verify API key and model availability","The model may be experiencing issues, try again later"]}],"failureMessages":["LLMError: Failed to generate research plan: Cannot destructure property 'text' of '(intermediate value)' as it is undefined.\n    at maxRetries (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/steps/plan.ts:306:15)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at executeWithRetry (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/utils/retry.ts:102:14)\n    at executePlanStep (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/steps/plan.ts:107:26)\n    at executeFunc (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/utils/steps.ts:66:26)\n    at executeWithRetry (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/utils/retry.ts:102:14)\n    at executeStep (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/test-utils.ts:158:10)\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/plan.test.ts:30:5)"],"fullName":"plan step should use provided LLM when specified","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should use provided LLM when specified"},{"ancestorTitles":["plan step"],"duration":11,"failureDetails":[{"name":"LLMError","code":"llm_error","step":"ResearchPlanning","details":{"error":{},"query":"test query"},"retry":true,"suggestions":["Check your LLM configuration","Verify API key and model availability","The model may be experiencing issues, try again later"]}],"failureMessages":["LLMError: Failed to generate research plan: Cannot destructure property 'text' of '(intermediate value)' as it is undefined.\n    at maxRetries (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/steps/plan.ts:306:15)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at executeWithRetry (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/utils/retry.ts:102:14)\n    at executePlanStep (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/steps/plan.ts:107:26)\n    at executeFunc (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/utils/steps.ts:66:26)\n    at executeWithRetry (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/utils/retry.ts:102:14)\n    at executeStep (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/test-utils.ts:158:10)\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/plan.test.ts:48:5)"],"fullName":"plan step should respect temperature setting","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should respect temperature setting"},{"ancestorTitles":["plan step"],"duration":16,"failureDetails":[{"name":"LLMError","code":"llm_error","step":"ResearchPlanning","details":{"error":{},"query":"test query"},"retry":true,"suggestions":["Check your LLM configuration","Verify API key and model availability","The model may be experiencing issues, try again later"]}],"failureMessages":["LLMError: Failed to generate research plan: Cannot destructure property 'text' of '(intermediate value)' as it is undefined.\n    at maxRetries (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/steps/plan.ts:306:15)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at executeWithRetry (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/utils/retry.ts:102:14)\n    at executePlanStep (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/steps/plan.ts:107:26)\n    at executeFunc (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/utils/steps.ts:66:26)\n    at executeWithRetry (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/utils/retry.ts:102:14)\n    at executeStep (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/test-utils.ts:158:10)\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/plan.test.ts:65:26)"],"fullName":"plan step should include plan in results when includeInResults is true","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should include plan in results when includeInResults is true"},{"ancestorTitles":["plan step"],"duration":12,"failureDetails":[{"name":"LLMError","code":"llm_error","step":"ResearchPlanning","details":{"error":{},"query":"test query"},"retry":true,"suggestions":["Check your LLM configuration","Verify API key and model availability","The model may be experiencing issues, try again later"]}],"failureMessages":["LLMError: Failed to generate research plan: Cannot destructure property 'text' of '(intermediate value)' as it is undefined.\n    at maxRetries (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/steps/plan.ts:306:15)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at executeWithRetry (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/utils/retry.ts:102:14)\n    at executePlanStep (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/steps/plan.ts:107:26)\n    at executeFunc (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/utils/steps.ts:66:26)\n    at executeWithRetry (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/utils/retry.ts:102:14)\n    at executeStep (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/test-utils.ts:158:10)\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/plan.test.ts:78:26)"],"fullName":"plan step should not include plan in results when includeInResults is false","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should not include plan in results when includeInResults is false"},{"ancestorTitles":["plan step"],"duration":10,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected substring: \u001b[32m\"LLM failure\"\u001b[39m\nReceived string:    \u001b[31m\"Failed to generate research plan: Cannot destructure property 'text' of '(intermediate value)' as it is undefined.\"\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\nExpected substring: \u001b[32m\"LLM failure\"\u001b[39m\nReceived string:    \u001b[31m\"Failed to generate research plan: Cannot destructure property 'text' of '(intermediate value)' as it is undefined.\"\u001b[39m\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/plan.test.ts:97:31)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)"],"fullName":"plan step should handle errors gracefully","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should handle errors gracefully"},{"ancestorTitles":["plan step"],"duration":16,"failureDetails":[{"name":"LLMError","code":"llm_error","step":"ResearchPlanning","details":{"error":{},"query":"test query"},"retry":true,"suggestions":["Check your LLM configuration","Verify API key and model availability","The model may be experiencing issues, try again later"]}],"failureMessages":["LLMError: Failed to generate research plan: Cannot destructure property 'text' of '(intermediate value)' as it is undefined.\n    at maxRetries (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/steps/plan.ts:306:15)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at executeWithRetry (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/utils/retry.ts:102:14)\n    at executePlanStep (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/steps/plan.ts:107:26)\n    at executeFunc (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/utils/steps.ts:66:26)\n    at executeWithRetry (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/utils/retry.ts:102:14)\n    at executeStep (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/test-utils.ts:158:10)\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/plan.test.ts:117:26)"],"fullName":"plan step should add structured plan data to state","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should add structured plan data to state"},{"ancestorTitles":["plan step"],"duration":2,"failureDetails":[{"name":"LLMError","code":"llm_error","step":"ResearchPlanning","details":{"error":{},"query":"test query"},"retry":true,"suggestions":["Check your LLM configuration","Verify API key and model availability","The model may be experiencing issues, try again later"]}],"failureMessages":["LLMError: Failed to generate research plan: Cannot destructure property 'text' of '(intermediate value)' as it is undefined.\n    at maxRetries (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/steps/plan.ts:306:15)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at executeWithRetry (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/utils/retry.ts:102:14)\n    at executePlanStep (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/steps/plan.ts:107:26)\n    at executeFunc (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/utils/steps.ts:66:26)\n    at executeWithRetry (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/utils/retry.ts:102:14)\n    at executeStep (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/test-utils.ts:158:10)\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/plan.test.ts:133:26)"],"fullName":"plan step should update metadata with step execution details","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should update metadata with step execution details"}],"endTime":1746796102073,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mplan step › should create a research plan with default options\u001b[39m\u001b[22m\n\n    ConfigurationError: No language model provided for planning step\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 90 |\u001b[39m     \u001b[90m// If no LLM is available, throw an error\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 91 |\u001b[39m     \u001b[36mif\u001b[39m (\u001b[33m!\u001b[39mmodelToUse) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 92 |\u001b[39m       \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mConfigurationError\u001b[39m({\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m             \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 93 |\u001b[39m         message\u001b[33m:\u001b[39m \u001b[32m\"No language model provided for planning step\"\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 94 |\u001b[39m         step\u001b[33m:\u001b[39m \u001b[32m'ResearchPlanning'\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 95 |\u001b[39m         details\u001b[33m:\u001b[39m { options }\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executePlanStep (\u001b[22m\u001b[2msrc/steps/plan.ts\u001b[2m:92:13)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat retryable (\u001b[22m\u001b[2msrc/steps/plan.ts\u001b[2m:340:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeFunc (\u001b[22m\u001b[2msrc/utils/steps.ts\u001b[2m:66:32)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeWithRetry (\u001b[22m\u001b[2msrc/utils/retry.ts\u001b[2m:71:18)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.execute (\u001b[22m\u001b[2msrc/utils/steps.ts\u001b[2m:105:32)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeStep (\u001b[22m\u001b[2mtests/test-utils.ts\u001b[2m:158:21)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/plan.test.ts\u001b[39m\u001b[0m\u001b[2m:19:43)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mplan step › should use provided LLM when specified\u001b[39m\u001b[22m\n\n    LLMError: Failed to generate research plan: Cannot destructure property 'text' of '(intermediate value)' as it is undefined.\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 304 |\u001b[39m         logger\u001b[33m.\u001b[39merror(\u001b[32m`Error generating research plan with LLM: ${errorMessage}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 305 |\u001b[39m         \u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 306 |\u001b[39m         \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mLLMError\u001b[39m({\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 307 |\u001b[39m           message\u001b[33m:\u001b[39m \u001b[32m`Failed to generate research plan: ${errorMessage}`\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 308 |\u001b[39m           step\u001b[33m:\u001b[39m \u001b[32m'ResearchPlanning'\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 309 |\u001b[39m           details\u001b[33m:\u001b[39m { error\u001b[33m,\u001b[39m query }\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat maxRetries (\u001b[22m\u001b[2msrc/steps/plan.ts\u001b[2m:306:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeWithRetry (\u001b[22m\u001b[2msrc/utils/retry.ts\u001b[2m:102:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executePlanStep (\u001b[22m\u001b[2msrc/steps/plan.ts\u001b[2m:107:26)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeFunc (\u001b[22m\u001b[2msrc/utils/steps.ts\u001b[2m:66:26)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeWithRetry (\u001b[22m\u001b[2msrc/utils/retry.ts\u001b[2m:102:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeStep (\u001b[22m\u001b[2mtests/test-utils.ts\u001b[2m:158:10)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/plan.test.ts\u001b[39m\u001b[0m\u001b[2m:30:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mplan step › should respect temperature setting\u001b[39m\u001b[22m\n\n    LLMError: Failed to generate research plan: Cannot destructure property 'text' of '(intermediate value)' as it is undefined.\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 304 |\u001b[39m         logger\u001b[33m.\u001b[39merror(\u001b[32m`Error generating research plan with LLM: ${errorMessage}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 305 |\u001b[39m         \u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 306 |\u001b[39m         \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mLLMError\u001b[39m({\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 307 |\u001b[39m           message\u001b[33m:\u001b[39m \u001b[32m`Failed to generate research plan: ${errorMessage}`\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 308 |\u001b[39m           step\u001b[33m:\u001b[39m \u001b[32m'ResearchPlanning'\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 309 |\u001b[39m           details\u001b[33m:\u001b[39m { error\u001b[33m,\u001b[39m query }\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat maxRetries (\u001b[22m\u001b[2msrc/steps/plan.ts\u001b[2m:306:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeWithRetry (\u001b[22m\u001b[2msrc/utils/retry.ts\u001b[2m:102:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executePlanStep (\u001b[22m\u001b[2msrc/steps/plan.ts\u001b[2m:107:26)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeFunc (\u001b[22m\u001b[2msrc/utils/steps.ts\u001b[2m:66:26)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeWithRetry (\u001b[22m\u001b[2msrc/utils/retry.ts\u001b[2m:102:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeStep (\u001b[22m\u001b[2mtests/test-utils.ts\u001b[2m:158:10)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/plan.test.ts\u001b[39m\u001b[0m\u001b[2m:48:5)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mplan step › should include plan in results when includeInResults is true\u001b[39m\u001b[22m\n\n    LLMError: Failed to generate research plan: Cannot destructure property 'text' of '(intermediate value)' as it is undefined.\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 304 |\u001b[39m         logger\u001b[33m.\u001b[39merror(\u001b[32m`Error generating research plan with LLM: ${errorMessage}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 305 |\u001b[39m         \u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 306 |\u001b[39m         \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mLLMError\u001b[39m({\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 307 |\u001b[39m           message\u001b[33m:\u001b[39m \u001b[32m`Failed to generate research plan: ${errorMessage}`\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 308 |\u001b[39m           step\u001b[33m:\u001b[39m \u001b[32m'ResearchPlanning'\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 309 |\u001b[39m           details\u001b[33m:\u001b[39m { error\u001b[33m,\u001b[39m query }\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat maxRetries (\u001b[22m\u001b[2msrc/steps/plan.ts\u001b[2m:306:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeWithRetry (\u001b[22m\u001b[2msrc/utils/retry.ts\u001b[2m:102:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executePlanStep (\u001b[22m\u001b[2msrc/steps/plan.ts\u001b[2m:107:26)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeFunc (\u001b[22m\u001b[2msrc/utils/steps.ts\u001b[2m:66:26)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeWithRetry (\u001b[22m\u001b[2msrc/utils/retry.ts\u001b[2m:102:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeStep (\u001b[22m\u001b[2mtests/test-utils.ts\u001b[2m:158:10)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/plan.test.ts\u001b[39m\u001b[0m\u001b[2m:65:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mplan step › should not include plan in results when includeInResults is false\u001b[39m\u001b[22m\n\n    LLMError: Failed to generate research plan: Cannot destructure property 'text' of '(intermediate value)' as it is undefined.\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 304 |\u001b[39m         logger\u001b[33m.\u001b[39merror(\u001b[32m`Error generating research plan with LLM: ${errorMessage}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 305 |\u001b[39m         \u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 306 |\u001b[39m         \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mLLMError\u001b[39m({\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 307 |\u001b[39m           message\u001b[33m:\u001b[39m \u001b[32m`Failed to generate research plan: ${errorMessage}`\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 308 |\u001b[39m           step\u001b[33m:\u001b[39m \u001b[32m'ResearchPlanning'\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 309 |\u001b[39m           details\u001b[33m:\u001b[39m { error\u001b[33m,\u001b[39m query }\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat maxRetries (\u001b[22m\u001b[2msrc/steps/plan.ts\u001b[2m:306:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeWithRetry (\u001b[22m\u001b[2msrc/utils/retry.ts\u001b[2m:102:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executePlanStep (\u001b[22m\u001b[2msrc/steps/plan.ts\u001b[2m:107:26)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeFunc (\u001b[22m\u001b[2msrc/utils/steps.ts\u001b[2m:66:26)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeWithRetry (\u001b[22m\u001b[2msrc/utils/retry.ts\u001b[2m:102:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeStep (\u001b[22m\u001b[2mtests/test-utils.ts\u001b[2m:158:10)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/plan.test.ts\u001b[39m\u001b[0m\u001b[2m:78:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mplan step › should handle errors gracefully\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoContain\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // indexOf\u001b[22m\n\n    Expected substring: \u001b[32m\"LLM failure\"\u001b[39m\n    Received string:    \u001b[31m\"Failed to generate research plan: Cannot destructure property 'text' of '(intermediate value)' as it is undefined.\"\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m  95 |\u001b[39m       \u001b[90m// Type guard to ensure error is an Error instance\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m  96 |\u001b[39m       \u001b[36mif\u001b[39m (error \u001b[36minstanceof\u001b[39m \u001b[33mError\u001b[39m) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m  97 |\u001b[39m         expect(error\u001b[33m.\u001b[39mmessage)\u001b[33m.\u001b[39mtoContain(\u001b[32m'LLM failure'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m  98 |\u001b[39m       } \u001b[36melse\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m  99 |\u001b[39m         fail(\u001b[32m'Expected error to be an instance of Error'\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 100 |\u001b[39m       }\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/plan.test.ts\u001b[39m\u001b[0m\u001b[2m:97:31)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mplan step › should add structured plan data to state\u001b[39m\u001b[22m\n\n    LLMError: Failed to generate research plan: Cannot destructure property 'text' of '(intermediate value)' as it is undefined.\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 304 |\u001b[39m         logger\u001b[33m.\u001b[39merror(\u001b[32m`Error generating research plan with LLM: ${errorMessage}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 305 |\u001b[39m         \u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 306 |\u001b[39m         \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mLLMError\u001b[39m({\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 307 |\u001b[39m           message\u001b[33m:\u001b[39m \u001b[32m`Failed to generate research plan: ${errorMessage}`\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 308 |\u001b[39m           step\u001b[33m:\u001b[39m \u001b[32m'ResearchPlanning'\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 309 |\u001b[39m           details\u001b[33m:\u001b[39m { error\u001b[33m,\u001b[39m query }\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat maxRetries (\u001b[22m\u001b[2msrc/steps/plan.ts\u001b[2m:306:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeWithRetry (\u001b[22m\u001b[2msrc/utils/retry.ts\u001b[2m:102:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executePlanStep (\u001b[22m\u001b[2msrc/steps/plan.ts\u001b[2m:107:26)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeFunc (\u001b[22m\u001b[2msrc/utils/steps.ts\u001b[2m:66:26)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeWithRetry (\u001b[22m\u001b[2msrc/utils/retry.ts\u001b[2m:102:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeStep (\u001b[22m\u001b[2mtests/test-utils.ts\u001b[2m:158:10)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/plan.test.ts\u001b[39m\u001b[0m\u001b[2m:117:26)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mplan step › should update metadata with step execution details\u001b[39m\u001b[22m\n\n    LLMError: Failed to generate research plan: Cannot destructure property 'text' of '(intermediate value)' as it is undefined.\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 304 |\u001b[39m         logger\u001b[33m.\u001b[39merror(\u001b[32m`Error generating research plan with LLM: ${errorMessage}`\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 305 |\u001b[39m         \u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 306 |\u001b[39m         \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mLLMError\u001b[39m({\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 307 |\u001b[39m           message\u001b[33m:\u001b[39m \u001b[32m`Failed to generate research plan: ${errorMessage}`\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 308 |\u001b[39m           step\u001b[33m:\u001b[39m \u001b[32m'ResearchPlanning'\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 309 |\u001b[39m           details\u001b[33m:\u001b[39m { error\u001b[33m,\u001b[39m query }\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat maxRetries (\u001b[22m\u001b[2msrc/steps/plan.ts\u001b[2m:306:15)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeWithRetry (\u001b[22m\u001b[2msrc/utils/retry.ts\u001b[2m:102:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executePlanStep (\u001b[22m\u001b[2msrc/steps/plan.ts\u001b[2m:107:26)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeFunc (\u001b[22m\u001b[2msrc/utils/steps.ts\u001b[2m:66:26)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeWithRetry (\u001b[22m\u001b[2msrc/utils/retry.ts\u001b[2m:102:14)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat executeStep (\u001b[22m\u001b[2mtests/test-utils.ts\u001b[2m:158:10)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/steps/plan.test.ts\u001b[39m\u001b[0m\u001b[2m:133:26)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/steps/plan.test.ts","startTime":1746796099050,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["research()"],"duration":8,"failureDetails":[{"name":"ValidationError","code":"validation_error","details":{"zodErrors":[{"code":"invalid_type","expected":"string","received":"undefined","path":["message"],"message":"Required"}],"result":{"summary":"This is a mock summary for testing","keyFindings":["Finding 1","Finding 2"],"sources":["https://example.com/1","https://example.com/2"]}},"retry":false,"suggestions":["Check that your outputSchema matches the actual structure of your results","Adjust the mock test result to match your schema","Add appropriate transformations to ensure output matches the schema"]}],"failureMessages":["ValidationError: Research results do not match the expected schema\n    at research (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/src/core/research.ts:117:19)\n    at Object.<anonymous> (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/research.test.ts:19:34)\n    at Promise.then.completed (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:316:40)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at _runTest (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-runner/build/runTest.js:444:34)\n    at Object.worker (/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/node_modules/jest-runner/build/testWorker.js:106:12)"],"fullName":"research() should validate input and output schemas correctly","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"should validate input and output schemas correctly"},{"ancestorTitles":["research()"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"research() should throw an error for invalid input schema","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw an error for invalid input schema"},{"ancestorTitles":["research()"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"research() should throw an error for invalid output schema","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"should throw an error for invalid output schema"}],"endTime":1746796102275,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mresearch() › should validate input and output schemas correctly\u001b[39m\u001b[22m\n\n    ValidationError: Research results do not match the expected schema\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 115 |\u001b[39m           \u001b[90m// If the schema validation fails, throw a proper validation error\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 116 |\u001b[39m           \u001b[36mif\u001b[39m (error \u001b[36minstanceof\u001b[39m z\u001b[33m.\u001b[39m\u001b[33mZodError\u001b[39m) {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 117 |\u001b[39m             \u001b[36mthrow\u001b[39m \u001b[36mnew\u001b[39m \u001b[33mValidationError\u001b[39m({\u001b[22m\n\u001b[2m     \u001b[90m     |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 118 |\u001b[39m               message\u001b[33m:\u001b[39m \u001b[32m'Research results do not match the expected schema'\u001b[39m\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 119 |\u001b[39m               details\u001b[33m:\u001b[39m { \u001b[22m\n\u001b[2m     \u001b[90m 120 |\u001b[39m                 zodErrors\u001b[33m:\u001b[39m error\u001b[33m.\u001b[39merrors\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat research (\u001b[22m\u001b[2msrc/core/research.ts\u001b[2m:117:19)\u001b[22m\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[22m\u001b[2m\u001b[0m\u001b[36mtests/research.test.ts\u001b[39m\u001b[0m\u001b[2m:19:34)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/jacquesmarais/Documents/Personal/deep-research-api/packages/core/tests/research.test.ts","startTime":1746796099066,"status":"failed","summary":""}],"wasInterrupted":false}
